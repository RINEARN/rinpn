coding UTF-8;

// License: CC0

// **************************************************************************************************************
// * This file is to specify values of various setting parameters of the RINPn.
// * This code in this file is written in the C-like simple scripting language "Vnano".
// * ( If you want, you can change the extension of this file to ".vnano" from ".txt". )
// * Please note following points when you modify the content in this file:
// * 
// *    * Right side of "//" will be ignored (used for or disabling a setting line, or for writing a comment).
// *    * Content of each setting line (excluding a comment part) must be end with ";".
// * 
// * For more details about the syntax of the Vnano, see the following page:
// * 
// *    https://www.vcssl.org/en-us/vnano/doc/tutorial/language
// *
// **************************************************************************************************************
// **************************************************************************************************************
// * このファイルでは、RINPn の各種設定パラメータの値を指定できます。
// * ファイルの内容は、C言語系の文法の簡易スクリプト言語「 Vnano 」で書かれています。
// * ( 初見での開きやすさ優先で、拡張子が「.txt」になっていますが、「 .vnano 」に変えても読み込まれます。)
// * 設定内容を編集する際は、以下の点にご注意ください:
// * 
// *   ・各行の「 // 」よりも右側は読み飛ばされます（設定行の無効化や、コメントの記述のために使用されます）。
// *   ・各設定行の内容（コメント記述部分を除く）は、「 ; 」記号で終わっている必要があります。
// * 
// * その他、Vnano の詳しい文法については、以下をご参照ください：
// * 
// *    https://www.vcssl.org/ja-jp/vnano/doc/tutorial/language
// * 
// **************************************************************************************************************


// **************************************************************************************************************
//         - User Settings -
//         - ユーザー関連の設定 -
// **************************************************************************************************************


// --------------------------------------------------------------------------------------------------------------
// Specify the locale-code. You can switch the language used for displaying messages by this setting.
// ロケールコードを指定します。メッセージの表示言語は、このロケールコードによって決定されます。
// (Type: string)
// --------------------------------------------------------------------------------------------------------------

localeCode = "AUTO";         // Set automatically based on your environment - 環境に応じて自動設定
// localeCode = "en-US";     // US English - アメリカ英語
// localeCode = "ja-JP";     // Japanese - 日本語





// **************************************************************************************************************
//         - User Interface Settings -
//         - 画面関連の設定 -
// **************************************************************************************************************


// --------------------------------------------------------------------------------------------------------------
// Specify the size of the window.
// ウィンドウの大きさを指定します。
// (Type: int)
// --------------------------------------------------------------------------------------------------------------

windowWidth = 540;            // Width (px) - 幅  (ピクセル)
windowHeight = 340;           // Height(px) - 高さ(ピクセル)
retractedWindowHeight = 160;  // Height when the key panel is retracted(px) - キーパネル収納時の高さ(ピクセル)


// --------------------------------------------------------------------------------------------------------------
// Specity the font sizes.
// 文字フォントの大きさを指定します。
// (Type: int)
// --------------------------------------------------------------------------------------------------------------

textFieldFontSize = 18;    // Font size of INPUT/OUTPUT text fields - INPUT/OUTPUTテキストフィールドのフォントサイズ
numberKeyFontSize = 18;    // Font size of number keys - 数字キーのフォントサイズ
behaviorKeyFontSize = 18;  // Font size of behavior keys - 動作キーのフォントサイズ ("=", "C", ...)
functionKeyFontSize = 14;  // Font size of function keys - 関数キーのフォントサイズ ("sin", "cos", ...)


// --------------------------------------------------------------------------------------------------------------
// Specify whether display the window of the RINPn on the top of all other windows or not.
// RINPn のウィンドウを、常に最前面に表示するかどうかを指定します。
// (Type: bool)
// --------------------------------------------------------------------------------------------------------------

stayOnTopOfAllWindows = true;        // Yes, display on the top - 最前面に表示する
// stayOnTopOfAllWindows = false;    // No, not necessary       - 最前面の必要は無い


// --------------------------------------------------------------------------------------------------------------
// Specify the opacity of the window.
// ウィンドウの不透明度を指定します。
// (Type: float)
// --------------------------------------------------------------------------------------------------------------

windowOpacity = 0.9;     // 0.0 ~ 1.0


// --------------------------------------------------------------------------------------------------------------
// Specify the background color of the window.
// ウィンドウの背景色を指定します。
// (Type: int)
// --------------------------------------------------------------------------------------------------------------

windowBackgroundColorR = 180;        // Red   - 赤成分 (0 ~ 255)
windowBackgroundColorG = 220;        // Green - 緑成分 (0 ~ 255)
windowBackgroundColorB = 255;        // Blue  - 青成分 (0 ~ 255)


// --------------------------------------------------------------------------------------------------------------
// Specify the background color of INPUT/OUTPUT text fields.
// INPUT/OUTPUT テキストフィールドの背景色を指定します。
// (Type: int)
// --------------------------------------------------------------------------------------------------------------

textFieldBackgroundColorR = 100;     // Red   - 赤成分 (0 ~ 255)
textFieldBackgroundColorG = 100;     // Green - 緑成分 (0 ~ 255)
textFieldBackgroundColorB = 100;     // Blue  - 青成分 (0 ~ 255)


// --------------------------------------------------------------------------------------------------------------
// Specify the foreground color (the color of characters) of INPUT/OUTPUT text fields.
// INPUT/OUTPUT テキストフィールドの前景色（文字の色）を指定します。
// (Type: int)
// --------------------------------------------------------------------------------------------------------------

textFieldForegroundColorR = 140;     // Red   - 赤成分 (0 ~ 255)
textFieldForegroundColorG = 255;     // Green - 緑成分 (0 ~ 255)
textFieldForegroundColorB = 180;     // Blue  - 青成分 (0 ~ 255)


// --------------------------------------------------------------------------------------------------------------
// Specify the foreground color (the color of characters) of labels of INPUT/OUTPUT text fields.
// INPUT/OUTPUT テキストフィールドの上にある、ラベルの前景色（文字の色）を指定します。
// (Type: int)
// --------------------------------------------------------------------------------------------------------------

textLabelForgroundColorR = 100;     // Red   - 赤成分 (0 ~ 255)
textLabelForgroundColorG = 120;     // Green - 緑成分 (0 ~ 255)
textLabelForgroundColorB = 140;     // Blue  - 青成分 (0 ~ 255)


// --------------------------------------------------------------------------------------------------------------
// Specify the foreground color (the color of characters) of key the panel retractor label.
// キーパネル折り畳みラベルの前景色（文字の色）を指定します。
// (Type: int)
// --------------------------------------------------------------------------------------------------------------

keyRetractorForegroundColorR = 100;     // Red   - 赤成分 (0 ~ 255)
keyRetractorForegroundColorG = 120;     // Green - 緑成分 (0 ~ 255)
keyRetractorForegroundColorB = 200;     // Blue  - 青成分 (0 ~ 255)




// **************************************************************************************************************
//         - Calculation Settings -
//         - 計算関連の設定 -
// **************************************************************************************************************


// --------------------------------------------------------------------------------------------------------------
// Specify whether round the calculated value or not.
// Note that, even when this option is disabled, a kind of rounding will be performed implicitly, for converting 
// internal binary data to finite decimal value (see: description of "performImplicitRoundingBeforeRounding").
// 計算結果を丸めて表示するかどうかを指定します。
// ただし、このオプションを無効（false）にした場合でも、2進数の内部データを10進数の有限桁の値に変換するために、
// 一種の暗黙的な丸めは行われる事に留意してください（「 performImplicitRoundingBeforeRounding 」の説明参照）。
// (Type: bool)
// --------------------------------------------------------------------------------------------------------------

outputRounderEnabled = true;        // Round       - 丸める
// outputRounderEnabled = false;    // Don't round - 丸めない


// --------------------------------------------------------------------------------------------------------------
// Specify how round the calculated value.
// 計算結果をどのように丸めるかを指定します。
// (Type: string)
// --------------------------------------------------------------------------------------------------------------

roundingMode = "HALF_UP";
// roundingMode = "HALF_DOWN";
// roundingMode = "HALF_TO_EVEN";
// roundingMode = "UP";
// roundingMode = "DOWN";


// --------------------------------------------------------------------------------------------------------------
// Specify what part of the calculated value you want to round.
// 計算結果の中で、丸めたい箇所を指定します。
// (Type: string)
// --------------------------------------------------------------------------------------------------------------

roundingTarget = "SIGNIFICAND";           // Significand of the floating point number          - 浮動小数点数の仮数部(有効桁数)
// roundingTarget = "AFTER_FIXED_POINT";  // After the decimal point of the fixed point number - 固定小数点数の小数点以下の部分


// --------------------------------------------------------------------------------------------------------------
// Specify what the length (digits) do you want to round the part of "roundingTarget" in.
// 上の "roundingTarget" で指定した部分を、何桁に丸めたいかを指定します。
// (Type: int)
// --------------------------------------------------------------------------------------------------------------

roundingLength = 10;


// --------------------------------------------------------------------------------------------------------------
// Specify whether perform the "implicit rounding" before round the calculated value or not. 
// The "implicit rounding" is the rounding for converting a binary internal data (64bit float) to a decimal value 
// within the finite digits (the theoritical converted result might have infinite digits).
// The implicit rounding are always performed when "outputRounderEnabled" option is disabled. In addition, 
// when the following option is enabled (set true), the implicit rounding will be performed even when the 
// "outputRounderEnabled" option is enabled, before the "explicit" rounding specified above is performed.
// For example, if you input 1.005, the internal unrounded output value will be 1.00499..., so when you round it
// into 3 digit on HALF_UP mode, you get 1 without the implicit rounding, and get 1.01 with the implicit rounding.
// 計算結果を丸める前に、暗黙的な丸めを行うかどうかを指定します。
// 暗黙的な丸めは、このソフトウェア内において2進数で扱われる内部データ（64bit float）を、表示用に10進変換する際、
// その結果が一般に無限桁になり得るため、精度的な限界付近（または以降）の桁を丸めるために行われる丸め処理です。
// outputRounderEnabled オプションが無効の際は常に作用します。加えて、以下のオプションが有効（true）な場合は、
// outputRounderEnabled オプション有効時にも作用するようになります（暗黙的な丸め後に、設定に応じて丸められます）。
// 例えば「 1.005 」を入力した場合、丸め前の内部データの値は、10進数表現で 1.00499... になります。これを HALF_UP
// モードで3桁に丸めた結果は、暗黙的な丸め無しでは 1 に、暗黙的な丸めありでは 1.01 になります。
// (Type: bool)
// --------------------------------------------------------------------------------------------------------------

performImplicitRoundingBeforeRounding = true;        // With implicit rounding    - 暗黙的な丸めあり
// performImplicitRoundingBeforeRounding = false;    // Without implicit rounding - 暗黙的な丸めなし


// --------------------------------------------------------------------------------------------------------------
// The option to handle integers written in inputted expressions as floating-point numbers (64bit).
// IF YOU DISABLE THIS OPTION, PLEASE BE AWARE THAT THE RESULT OF DIVISION BETWEEN INTEGERS WILL BE AN INTEGER.
// This option does not affect to the interpretation of the code in script files.
// INPUT欄に入力された数式内に記述された整数を、浮動小数点数（64bit精度）として扱うオプションです。
// このオプションを無効化した場合、整数同士の割り算の結果は整数になる事にご注意ください。
// なお、このオプションは、スクリプトファイル内のコード内容の解釈には影響しません。
// (Type: bool)
// --------------------------------------------------------------------------------------------------------------

evalIntLiteralAsFloat = true;          // Enable  - 有効化する
// evalIntLiteralAsFloat = false;      // Disable - 無効化する


// --------------------------------------------------------------------------------------------------------------
// The option to forbid using non-float type values/variables/functions(return value) in inputted expressions.
// This option is strongly recommended to be enabled when "evalIntLiteralAsFloat" option is enabled, to prevent 
// overlooking "contermination" of integer values, which can cause of unexpected integer divisions.
// This option does not affect to the interpretation of the code in script files.
// INPUT欄に入力された数式内で、浮動小数点数以外の値/変数/関数（戻り値）の使用を不可能にするオプションです。
// 「 evalIntLiteralAsFloat 」オプションが有効な場合、計算式への整数の混入（意図しない整数除算などの原因になり得ます）
// の見落としを防ぐために、このオプションも併せて有効化する事が強く推奨されます。
// なお、このオプションは、スクリプトファイル内のコード内容の解釈には影響しません。
// (Type: bool)
// --------------------------------------------------------------------------------------------------------------

evalOnlyFloat = evalIntLiteralAsFloat;


// --------------------------------------------------------------------------------------------------------------
// The option to allows only expressions as the input
// (so, variable declaration, loop, and other statements will be denied).
// This option does not affect to the interpretation of the code in script files.
// INPUT欄に入力された内容の中で、式以外の記述（変数宣言やループなど）を不可能にするオプションです。
// そのような処理はスクリプトとしてファイル内に書くのが望ましく、
// 上記のデータ型関連のオプションなどの作用による不要な混乱を避けるために存在するオプションです。
// このオプションは、スクリプトファイル内のコード内容の解釈には影響しません。
// (Type: bool)
// --------------------------------------------------------------------------------------------------------------

evalOnlyExpression = true;          // Enable  - 有効化する
// evalOnlyExpression = false;      // Disable - 無効化する


// --------------------------------------------------------------------------------------------------------------
// Specify whether take Unicode-normalization to the inputted content or not.
// INPUT欄の入力内容の中の文字に対して、Unicode正規化を行うかどうかを指定します。
// (Type: bool)
// --------------------------------------------------------------------------------------------------------------

inputNormalizerEnabled = true;        // Normalize       - 正規化する
// inputNormalizerEnabled = false;    // Don't normalize - 正規化しない





// **************************************************************************************************************
//         - Library/Plug-in Settings -
//         - ライブラリ/プラグイン関連の設定 -
// **************************************************************************************************************

// Note: When you want to add new library scripts or plug-ins, modify following files:
// 備考: 新しいライブラリスクリプトやプラグインを追加するには、以下のファイルを編集してください:
//   * lib/VnanoLibraryList.txt
//   * plugin/VnanoPluginList.txt

// --------------------------------------------------------------------------------------------------------------
// Specify whether reload plug-ins for each calculation (or execution of a script) or not.
// When you are developing a new plug-in and testing/debugguing it on the GUI mode, this option might be helpful.
// Please note that, if you enable (set "true") this option, behaviour of plug-ins having internal states change, 
// because internal states will be re-initialized for each calculation. 
// Therefore, we recommend to set this option to "false" after when you have finished to develop new plug-ins.
// 計算（またはスクリプトの実行）毎に、プラグインを再読み込みするかどうかを指定します。
// このオプションは、新しいプラグインを開発し、それをGUIモードでテスト/デバッグする際に役立つかもしれません。
// ただし、このオプションを有効化（true に設定）すると、内部で何らかの状態を保持するようなプラグインの挙動は、
// 計算毎に内部状態がリセットされるため、通常とは変化してしまう事に注意してください。
// そのため、新規プラグインの開発完了後は、このオプションの値を false に戻しておく事が推奨されます。
// (Type: bool)
// --------------------------------------------------------------------------------------------------------------

reloadPlugin = false;     // Don't reload - 再読み込みしない
// reloadPlugin = true;   // Reload       - 再読み込みする


// --------------------------------------------------------------------------------------------------------------
// Specify whether reload contents of library scripts for each calculation (or execution of a script) or not.
// If you disable (set "false") this option, responses of calculations may going to be little quick.
// However, on the current version, disabling this option have very little effect for responses.
// 計算（またはスクリプトの実行）毎に、ライブラリスクリプトの内容を再読み込みするかどうかを指定します。
// このオプションを無効化（false に設定）すると、計算の応答が若干早くなる可能性があります。
// ただし、現状のバージョンでは、有効/無効でレスポンスに大差は生じません。
// (Type: bool)
// --------------------------------------------------------------------------------------------------------------

reloadLibrary = true;       // Reload       - 再読み込みする
// reloadLibrary = false;   // Don't reload - 再読み込みしない





// **************************************************************************************************************
//         - Script Process Settings -
//         - スクリプト処理関連の設定 -
// **************************************************************************************************************


// --------------------------------------------------------------------------------------------------------------
// Specify whether print stack traces to the standard-error or don't, when exceptions occurred.  (for debugging)
// 例外発生時に、スタックトレースを標準エラー出力に表示するかどうかを指定します。               （デバッグ用）
// (Type: bool)
// --------------------------------------------------------------------------------------------------------------

exceptionStackTracerEnabled = false;      // Don't print - 表示しない
// exceptionStackTracerEnabled = true;    // Print       - 表示する


// --------------------------------------------------------------------------------------------------------------
// Specify whether dump intermediate code, Abstract Syntax Tree (AST), etc.  (for debugging)
// 中間コードや抽象構文木(AST)などをダンプするかどうかを指定します。        （デバッグ用）
// (Type: bool)
// --------------------------------------------------------------------------------------------------------------

dumperEnabled = false;      // Don't dump - ダンプしない
// dumperEnabled = true;    // Dump       - ダンプする


// --------------------------------------------------------------------------------------------------------------
// Specify the content to dump. (for debugging)
// ダンプする対象を指定します。（デバッグ用）
// (Type: string)
// --------------------------------------------------------------------------------------------------------------

dumperTarget = "ALL";                  // All of the following contents - 下記の内容のすべて
// dumperTarget = "INPUTTED_CODE";     // Content of the inputted inputted code - エンジンに入力されたコードの内容
// dumperTarget = "PREPROCESSED_CODE"; // Result code of the preprocessor - プリプロセッサ処理済みの内容
// dumperTarget = "TOKEN";             // Tokens generated by the lexical analyzer - 字句解析結果のトークン
// dumperTarget = "PARSED_AST";        // AST generated by the parser - 構文解析結果のAST
// dumperTarget = "ANALYZED_AST";      // AST generated by the semantic analyzer - 意味解析結果のAST
// dumperTarget = "ASSEMBLY_CODE";     // Virtual assembly code generated by the compiler - コンパイル結果の仮想的なアセンブリコード
// dumperTarget = "OBJECT_CODE";       // Virtual object code running on the VM, generated by the assembler - VM上で実行される、アセンブル済みの仮想的なオブジェクトコード
// dumperTarget = "ACCELERATOR_CODE";  // Optimized instruction code running on the high-speed VM - 高速版VM上で実行される、最適化済みの命令コード 
// dumperTarget = "ACCELERATOR_STATE"; // Internal state of the initialized accelerator - 高速版VMの初期化後の内部状態


// --------------------------------------------------------------------------------------------------------------
// Specify whether enable the high-speed VM or not. If the behaviour seems to be strange, disable it.
// 高速版のVMを有効化するかどうかを指定します。挙動がおかしい場合は、試しに無効にしてみてください。
// (Type: bool)
// --------------------------------------------------------------------------------------------------------------

acceleratorEnabled = true;         // Enable  - 有効化する  (Max performance: About 700 MFLOPS ~ 10 GFLOPS)
// acceleratorEnabled = false;     // Disable - 無効化する  (Max performance: About 20 MFLOPS)


// --------------------------------------------------------------------------------------------------------------
// Specify the optimization level of the high-speed VM.
// The larger level make the processing speed faster, but chance of encountering unknown bugs might increase.
// 高速版VMにおける最適化レベルを指定します。
// 値が大きいほど高速ですが、より多くの最適化が施されるため、未知のバグに会う確率も上がってしまうかもしれません。
// (Type: int)
// --------------------------------------------------------------------------------------------------------------

acceleratorOptimizationLevel = 0;
// acceleratorOptimizationLevel = 1; // Optimize data access for reducing overhead costs - データアクセスのオーバーヘッドを削減する最適化を適用
// acceleratorOptimizationLevel = 2; // Optimize instructions with keeping code structures - コード構造が保たれるレベルでの命令列の最適化を適用
// acceleratorOptimizationLevel = 3; // Optimize with modifying code structures (inline expansion, etc.) - コードの構造変更を伴う最適化を適用(インライン展開など)

